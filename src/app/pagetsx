"use client";

import React, { useEffect, useState } from 'react';
import { getDatabase, ref as databaseRef, push, serverTimestamp } from 'firebase/database';
import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';
import { User, onAuthStateChanged } from 'firebase/auth';
import { auth } from '../../firebase';
import Image from "next/legacy/image";

interface BlogPost {
  title: string;
  content: string;
  imageUrl: string;
  createdAt: ReturnType<typeof serverTimestamp>;
  userId: string;
  username: string;
  profilePicture: string;
  likes: number;
  likedBy: string[];
}

interface BlogPostingProps {
  onPostCreated?: () => void;
}

export default function BlogPosting({ onPostCreated }: BlogPostingProps) {
  const [postTitle, setPostTitle] = useState<string>('');
  const [postContent, setPostContent] = useState<string>('');
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imageUrl, setImageUrl] = useState<string>('');
  const [user, setUser] = useState<User | null>(null);
  const [error, setError] = useState<string>('');
  const [isUploaderVisible, setIsUploaderVisible] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const [showAuthWarning, setShowAuthWarning] = useState<boolean>(false);

  const storage = getStorage();
  const database = getDatabase();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user || null);
    });
    return () => unsubscribe();
  }, []);

  const showLoginWarning = (): boolean => {
    if (!user) {
      setShowAuthWarning(true);
      setTimeout(() => setShowAuthWarning(false), 3000);
      return true;
    }
    return false;
  };

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (showLoginWarning()) return;
    setPostTitle(e.target.value);
  };

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    if (showLoginWarning()) return;
    setPostContent(e.target.value);
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (showLoginWarning()) return;
    const file = e.target.files?.[0];
    if (file) {
      setSelectedImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const imageFormatCheck = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];

    const allowedMimeTypes = [
      "image/jpeg",
      "image/jpg", 
      "image/png", 
      "image/gif", 
      "image/svg+xml",
    ];

    const allowedExtensions = [".jpg", ".jpeg", ".png", ".gif", ".svg"];

    if (file) {
      const fileExtension = file.name.slice(file.name.lastIndexOf(".")).toLowerCase();
      if (allowedMimeTypes.includes(file.type) || allowedExtensions.includes(fileExtension)) {
        handleImageChange(e);
      } else {
        setError("Please upload a valid image file (JPG, JPEG, PNG, GIF, SVG).");
        e.target.value = '';
        setTimeout(() => {
          setError('')
        }, 3000);
      }
    }
  };

  const handleDeleteImage = () => {
    if (showLoginWarning()) return;

    setSelectedImage(null);
    setImageUrl('');
  };

  const uploadImage = async (file: File): Promise<string> => {
    if (showLoginWarning()) return '';

    const imageRef = storageRef(storage, `blog-images/${Date.now()}-${file.name}`);

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/sharp', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        setError('Image compression failed.');
        setTimeout(() => {
          setError('')
        }, 3000);
        return '';
      }

      const optimizedImageBlob = await response.blob();
      const optimizedFile = new File([optimizedImageBlob], file.name, { type: 'image/jpeg' });

      const snapshot = await uploadBytes(imageRef, optimizedFile);
      const downloadURL = await getDownloadURL(snapshot.ref);
      return downloadURL;
    } catch (error) {
      console.error('Error uploading file:', error);
      setError('Failed to upload image. Please try again.');
      setTimeout(() => {
        setError('')
      }, 3000);
      return '';
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (showLoginWarning()) return;

    if (!postTitle.trim() || !postContent.trim()) {
      setError('Please enter both a title and content for your blog post.');
      setTimeout(() => {
        setError('')
      }, 3000);
      return;
    }

    setLoading(true);

    try {
      let uploadedImageUrl = '';
      if (selectedImage) {
        uploadedImageUrl = await uploadImage(selectedImage);
      }

      if (!user) {
        setError('You must be logged in to create a blog post.');
        return;
      }

      const newBlogPost: BlogPost = {
        title: postTitle.trim(),
        content: postContent.trim(),
        imageUrl: uploadedImageUrl,
        createdAt: serverTimestamp(),
        userId: user.uid,
        username: user.displayName || user.email || 'Anonymous',
        profilePicture: user.photoURL || '/img/placehold.png',
        likes: 0,
        likedBy: []
      };

      const blogPostsRef = databaseRef(database, 'blog-posts');
      await push(blogPostsRef, newBlogPost);

      // Reset form
      setPostTitle('');
      setPostContent('');
      handleDeleteImage();
      
      if (onPostCreated) onPostCreated();
    } catch (error) {
      console.error('Error creating blog post:', error);
      setError('Failed to create blog post. Please try again.');
      setTimeout(() => {
        setError('')
      }, 3000);
    } finally {
      setLoading(false);
    }
  };

  const showUploader = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    if (showLoginWarning()) return;

    setIsUploaderVisible(!isUploaderVisible);
  };

  return (
    <form 
      onSubmit={handleSubmit} 
      className="mb-6 
        bg-gradient-to-br 
        from-purple-900/10 
        via-gray-800/20 
        to-blue-900/10 
        backdrop-blur-sm 
        border 
        border-white/10 
        rounded-2xl 
        shadow-xl 
        hover:from-purple-900/15 
        hover:via-gray-800/25 
        hover:to-blue-900/15 
        transition-all 
        duration-300 
        ease-in-out 
        relative 
        overflow-hidden 
        p-4"
    >
      {showAuthWarning && (
        <div className="absolute top-0 left-0 right-0 bg-yellow-500 text-yellow-900 p-2 rounded-t-lg text-center animate-fade-in">
          Please log in to create a blog post
        </div>
      )}

      <div className="mb-4">
        <label htmlFor="blog-title" className="sr-only">Blog Post Title</label>
        <input
          id="blog-title"
          type="text"
          className={`w-full bg-gray-700 p-2 rounded-lg drop-shadow-md focus:ring-2 focus:ring-purple-600 outline outline-none ${user ? 'text-white' : 'text-gray-400'}`}
          value={postTitle}
          onChange={handleTitleChange}
          placeholder={user ? "Enter your blog post title" : "Please log in to create a blog post"}
          disabled={!user}
        />
      </div>

      <label htmlFor="blog-content" className="sr-only">Blog Post Content</label>
      <textarea
        id="blog-content"
        className={`w-full bg-gray-700 p-2 rounded-lg drop-shadow-md focus:ring-2 focus:ring-purple-600 outline outline-none ${user ? 'text-white' : 'text-gray-400'}`}
        rows={8}
        value={postContent}
        onChange={handleContentChange}
        placeholder={user ? "Write your blog post here..." : "Please log in to create a blog post"}
        disabled={!user}
      />

      {error && <div className="text-red-500 mb-4">{error}</div>}

      <div className="flex items-center justify-between mx-1">
        <div className="flex space-x-2 justify-start items-center">
          <button
            type="button"
            onClick={showUploader}
            className={`mt-2 rounded-lg drop-shadow-md ${user ? 'bg-gray-700 active:bg-purple-300 active:bg-opacity-50 fill-gray-400 active:fill-purple-500' : 'bg-gray-400 fill-gray-600 cursor-not-allowed'}`}
            disabled={!user}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" viewBox="0 0 24 24" className="drop-shadow-md m-1">
              <path d="M13.5 9a1.5 1.5 0 1 1 0-3a1.5 1.5 0 0 1 0 3" opacity={0.25}></path>
              <path d="M19 2H5a3.01 3.01 0 0 0-3 3v8.86l3.88-3.88a3.075 3.075 0 0 1 4.24 0l2.871 2.887l.888-.888a3.01 3.01 0 0 1 4.242 0L22 15.86V5a3.01 3.01 0 0 0-3-3m-5.5 7a1.5 1.5 0 1 1 0-3a1.5 1.5 0 0 1 0 3" opacity={0.5}></path>
              <path d="M10.12 9.98a3.075 3.075 0 0 0-4.24 0L2 13.86V19a3.01 3.01 0 0 0 3 3h14a3 3 0 0 0 2.16-.92z"></path>
              <path d="m22 15.858l-3.879-3.879a3.01 3.01 0 0 0-4.242 0l-.888.888l8.165 8.209c.542-.555.845-1.3.844-2.076z" opacity={0.25}></path>
            </svg>
          </button>
        </div>
      </div>

      {imageUrl && (
        <div className="relative mt-2">
          <Image
            src={imageUrl}
            alt="Selected"
            width={300}
            height={200}
            className="object-cover rounded-md"
          />
          <button
            type="button"
            onClick={handleDeleteImage}
            className="absolute top-0 right-0 bg-red-300 bg-opacity-80 text-red-800 rounded-full p-1"
          >
            X
          </button>
        </div>
      )}

      {isUploaderVisible && !imageUrl && (
        <div className="flex items-center justify-center w-full mt-2">
          <label htmlFor="image-upload" className={`flex flex-col items-center justify-center w-full h-64 border rounded-lg cursor-pointer ${user
            ? 'border-gray-500 bg-gray-950 hover:border-purple-800 hover:bg-purple-300 hover:bg-opacity-30 fill-gray-400 hover:fill-purple-500 text-gray-400 hover:text-purple-500'
            : 'border-gray-400 bg-gray-100 cursor-not-allowed text-gray-400 fill-gray-400'
            }`}>
            <div className="flex flex-col items-center justify-center pt-5 pb-6">
              <svg xmlns="http://www.w3.org/2000/svg" width="2.3em" height="2.3em" viewBox="0 0 24 24">
                <path d="M22 16v-1c0-2.829 0-4.242-.879-5.121S18.828 9 16 9H8c-2.83 0-4.243 0-5.122.88C2 10.757 2 12.17 2 14.998V16c0 2.828 0 4.242.879 5.121C3.757 22 5.172 22 8 22h8c2.828 0 4.243 0 5.121-.879S22 18.828 22 16" opacity={0.5}></path>
                <path fillRule="evenodd" d="M12 15.75a.75.75 0 0 0 .75-.75V4.027l1.68 1.961a.75.75 0 1 0 1.14-.976l-3-3.5a.75.75 0 0 0-1.14 0l-3 3.5a.75.75 0 1 0 1.14.976l1.68-1.96V15c0 .414.336.75.75.75" clipRule="evenodd"></path>
              </svg>
              <p className="mb-2 text-sm">
                <span className="font-semibold">Click to upload</span> or drag and drop
              </p>
              <p className="text-xs">SVG, PNG, JPG or GIF</p>
            </div>
            <input
              id="image-upload"
              type="file"
              accept="image/*"
              onChange={imageFormatCheck}
              className="hidden"
              disabled={!user}
            />
          </label>
        </div>
      )}

      <button
        type="submit"
        className={`mt-2 px-12 py-2 rounded-lg bg-purple-900/20 backdrop-blur-xl border border-purple-500/30 text-white hover:bg-purple-900/30 transition-all duration-300 ease-in-out shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-purple-500/50 ${user ? 'opacity-100' : 'opacity-50 cursor-not-allowed'}`}
        disabled={loading || !user || (!postTitle.trim() && !postContent.trim())}
      >
        {loading ? 'Publishing...' : 'Publish'}
      </button>
    </form>
  );
}